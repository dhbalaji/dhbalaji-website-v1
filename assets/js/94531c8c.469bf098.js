"use strict";(self.webpackChunkblog2=self.webpackChunkblog2||[]).push([[2671],{49768:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Notes/cheatsheet/typescript","title":"Typescript Cheatsheet","description":"Core Concepts","source":"@site/docs/Notes/cheatsheet/typescript.md","sourceDirName":"Notes/cheatsheet","slug":"/Notes/cheatsheet/typescript","permalink":"/docs/Notes/cheatsheet/typescript","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Typescript Cheatsheet"},"sidebar":"tutorialSidebar","previous":{"title":"Notes Part 1","permalink":"/docs/Notes/accessibility/notes"},"next":{"title":"NextJS 15 Learning Notes","permalink":"/docs/Notes/next-js/notes-part1"}}');var r=s(86070),l=s(20887);const c={title:"Typescript Cheatsheet"},i=void 0,a={},o=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"Datatypes",id:"datatypes",level:3},{value:"Operators",id:"operators",level:3},{value:"Control flow",id:"control-flow",level:3},{value:"Functions",id:"functions",level:3},{value:"Interfaces &amp; Classes",id:"interfaces--classes",level:3},{value:"Advanced Concepts",id:"advanced-concepts",level:2},{value:"Generics",id:"generics",level:3},{value:"Decorators",id:"decorators",level:3},{value:"metadata",id:"metadata",level:3},{value:"Async",id:"async",level:3},{value:"Updates to TS",id:"updates-to-ts",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"datatypes",children:"Datatypes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"number"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    let age: number;\n    age = 25;\n\n    let age = 25;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"string"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'let name: string;\nname = "John";\n\nlet name = "John";\n\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"boolean"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"let isValid: boolean;\nisValid = true;\n\nlet isValid = true;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"array"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"let numbers: number[];\nnumbers = [1,2,3];\n\nlet numbers = [1,2,3];\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"tuple"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'let random: [string, number, string] = ["A", 1, "B"]\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"enum"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'enum Color {\n    Red,\n    Blue\n}\n\nenum CustomColorCode {\n    Red = "#233233"\n    Blue = "#434384"\n}\n\nlet red = CustomColorCode.Red;\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"any"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    // Do not use it unless unavoidable or for dynamic values\n\n    let dynamicValue: any = 5;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"void"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'function sayHello():void {\n    console.log("Hello")\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"null"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    let nullValue: null = null;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"undefined"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"    let undefinedValue: undefined = undefined;\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"object"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'let user:object = {\n    name: "john",\n    age: "25"\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"operators",children:"Operators"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Arithmetic - ",(0,r.jsx)(n.code,{children:"+,-,*,/,%"})]}),"\n",(0,r.jsxs)(n.li,{children:["Assignment - ",(0,r.jsx)(n.code,{children:"=,+=,-=,*=,/=,%="})]}),"\n",(0,r.jsxs)(n.li,{children:["Comparison - ",(0,r.jsx)(n.code,{children:"==, !=, ===, !==, > < , >=, <="})]}),"\n",(0,r.jsxs)(n.li,{children:["Logical - ",(0,r.jsx)(n.code,{children:"&&, ||, !"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"control-flow",children:"Control flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"if...else"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"do...while"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"switch"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"while"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Simple function"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function addNumbers(number1: number, number2: number): number {\n    return number1 + number2;\n}\n\nconst result = addNumbers(1,2);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Optional parameter"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function addNumbers(number1: number, number2?: number): number {\n    // function body\n}\n\nconst result = addNumbers(1);\nconst result = addNumbers(1,2);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Default parameter"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function addNumbers(number1: number, number2= 10): number {\n    // function body\n}\n\nconst result = addNumbers(1);\nconst result = addNumbers(1,2);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsx)(n.li,{children:"Rest parameter"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function addNumbers(number1: number, ...numbers: number[]): number {\n    // function body\n}\n\nconst result = addNumbers(1);\nconst result = addNumbers(1,2,3,4,5);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"5",children:["\n",(0,r.jsx)(n.li,{children:"No return"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function NOOP(): void {\n    // function body\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"interfaces--classes",children:"Interfaces & Classes"}),"\n",(0,r.jsx)(n.p,{children:"Interface - defines the structure of objects and provide contract for implementing classes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'interface Person {\n    name: string;\n    age: number;\n    sayHi: () => void\n}\n\nlet person: Person = {\n    name: "Balaji",\n    age: "22",\n    sayHi: function() {\n        // function body\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Classes - defines the object blue print"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'class Person {\n    name: string;\n    age: number;\n\n    constructor(name: string, age: number) {\n        this.name = name;\n        this.age = age;\n    }\n\n    sayHi():void {\n        console.log(`Hi ${this.name}`)\n    }\n}\n\nlet person:Person = new Person("Balaji", 22)\nperson.sayHi();\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-concepts",children:"Advanced Concepts"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Union types -allows multiple types ",(0,r.jsx)(n.code,{children:"|"})]}),"\n",(0,r.jsxs)(n.li,{children:["Intersection types - combine multiple types ",(0,r.jsx)(n.code,{children:"&"})]}),"\n",(0,r.jsx)(n.li,{children:"Type aliases - create custom names for types"}),"\n",(0,r.jsx)(n.li,{children:"Generics - reusable methods that can work with multiple types"}),"\n",(0,r.jsxs)(n.li,{children:["Module - encapsulate code into seperate files","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"export"}),"\n",(0,r.jsx)(n.li,{children:"import"}),"\n",(0,r.jsx)(n.li,{children:"default export"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Namespace - internal modules, code organization"}),"\n",(0,r.jsx)(n.li,{children:"Type inference - auto infer types of variables"}),"\n",(0,r.jsxs)(n.li,{children:["Type guards - infer type during runtime ",(0,r.jsx)(n.code,{children:"typeof"})]}),"\n",(0,r.jsx)(n.li,{children:"Module resolution - relative path, package import"}),"\n",(0,r.jsx)(n.li,{children:"Decorators - add metadata, modify the behavior of classes, methods at design time"}),"\n",(0,r.jsxs)(n.li,{children:["Inheritance - can ",(0,r.jsx)(n.code,{children:"extend"})," classes"]}),"\n",(0,r.jsxs)(n.li,{children:["Encapsulation - bundle related properties and methods ",(0,r.jsx)(n.code,{children:"private"}),", ",(0,r.jsx)(n.code,{children:"public"})," and ",(0,r.jsx)(n.code,{children:"protected"})]}),"\n",(0,r.jsx)(n.li,{children:"Polymorphism - method overloading"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"generics",children:"Generics"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Methods"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"function identity<T>(arg: T) {\n    return arg;\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Classes"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'class Box<T> {\n    private value: T;\n\n    constructor(value: T) {\n        this.value = value;\n    }\n\n    getValue(): T {\n        return this.value;\n    }\n}\n\nlet stringBox = new Box<string>("Typescript");\nconsole.log(stringBox.getValue());\n\nlet numberBox = new Box<number>(40);\nconsole.log(numberBox.getValue());\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Constraints with Generics"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface LengthType {\n    length: number;\n}\n\nfunction getLength<T extends LengthType>(arg: T): number {\n    return arg.length\n}\n\nlet arrayLength = getLength([1,2,3,4,5]);\nconsole.log(arrayLength);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"decorators",children:"Decorators"}),"\n",(0,r.jsxs)(n.p,{children:["Special declaration that can be attached to classes, methods, properties or parameters. Prefixed with ",(0,r.jsx)(n.code,{children:"@"}),". Executed at runtime."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'function log(target: any) {\n    console.log("target is", target);\n}\n\n@log\nclass MyClass {\n    // class body\n}\n\nclass MyClass {\n\n    @readonly\n    name: string = "John";\n\n    @log\n    method() {\n        // method body\n    }\n\n    method1(@dec input: string) {\n        // method body\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"metadata",children:"metadata"}),"\n",(0,r.jsx)(n.p,{children:"Attach additional data to classes, methods, properties or parameters."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'class MyClass {\n    // Set metadata\n    @Reflect.metadata("custom tag", "some data");\n    method() {\n        // method body\n    }\n}\n\nconst metadata = Reflect.getMetadata("custom:tag", MyClass.prototype, "method");\nconsole.log(metadata); // some data\n'})}),"\n",(0,r.jsx)(n.p,{children:"Useful in logging and debugging. Argument decorators can be used in input validation. Dependency injection for frameworks, routing and middleware."}),"\n",(0,r.jsx)(n.p,{children:"From architecture perspective, the above features can help in code modularity by seperating concerns.Others being readability and runtime reflection."}),"\n",(0,r.jsx)(n.h3,{id:"async",children:"Async"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Callback"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'function getData(callback: (data: string) => void) {\n    setTimeout(() => {\n        callback("Hello")\n    }, 1000)\n}\n\ngetData((msg: string) => {\n    console.log(msg)\n})\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"Promises"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'\nfunction fetchData():Promise<string> {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve("success")\n        }, 1000)\n    })\n}\n\nfetchData().then((data) => {\n    console.log(data)\n}).catch((e) => {\n    console.log(e)\n})\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Async await"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'async function fetchData():Promise<string> {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve("success")\n        })\n    })\n}\n\nasync function getData() {\n    try {\n        const data = await fetchData();\n        console.log(data); // success\n    } catch(e) {\n        console.error(e)\n    }\n}\n\ngetData()\n'})}),"\n",(0,r.jsx)(n.h2,{id:"updates-to-ts",children:"Updates to TS"}),"\n",(0,r.jsx)(n.p,{children:"--- coming soon! ---"})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},20887:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>i});var t=s(30758);const r={},l=t.createContext(r);function c(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);